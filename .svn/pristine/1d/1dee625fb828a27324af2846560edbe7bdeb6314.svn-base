package com.formalworks.test.ebook.web.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URLEncoder;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.formalworks.test.ebook.web.dao.EBook;
import com.formalworks.test.ebook.web.dao.MDFileWriter;
import com.formalworks.test.ebook.web.model.EBookFactory;
import com.formalworks.test.ebook.web.service.MDFileWriterFactory;

@Controller
public class FileDownloadController {

	EBook ebook;
	@Autowired
	EBookFactory ebookFactory;
	
	// 임시로 생성되는 중간 파일들의 경로
//	private String tempFileSavePath = "d:";
	private String tempFileSavePath = "D:" + File.separator;
	
	/** 
	 * Markdown 파일 생성
	 * @param ebook
	 * @return
	 */
	private File createMDFile(EBook ebook)
	{
		MDFileWriter writer = MDFileWriterFactory.newInstance();
		try {
			writer.write(ebook);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		// 책이름으로 생성된 md파일을 input.md 파일로 복사
		File copiedMDFile = new File(tempFileSavePath + "input.md");
		
		// 생성된 md 파일을 input.md 파일로 복사
		try {
			FileUtils.copyFile(new File(ebook.getOutputMdFilePath()), copiedMDFile);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		new File(ebook.getOutputMdFilePath()).delete();
		
		return copiedMDFile;		
	}
	

	/**
	 * batch 파일 생성
	 * @param pandocInFile
	 * @param pandocOutFile
	 * @return
	 */
	private File createBatchFile(File pandocInFile, File pandocOutFile) {
			
		ebook = ebookFactory.getInstance();

		// batch 파일 명령어
	    String batCommand = "pandoc -f markdown -t epub --toc ";
	    if(!ebook.getCoverImg().equals("none")) {
	    	batCommand += "--epub-cover-image ";
	    	batCommand += (tempFileSavePath + "cover.jpg ");
	    }
	    batCommand += (tempFileSavePath + pandocInFile.getName());
		batCommand += (" -o " + tempFileSavePath + pandocOutFile.getName());
		
		// batch 파일 경로
		String batFilePath = tempFileSavePath + "MDtoEPUB.bat";
		
		try {
			FileUtils.writeStringToFile(new File(batFilePath), batCommand);			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return new File(batFilePath);
	}	
	
	/**
	 * batch 파일 실행
	 * @param batFilePath
	 */
	private void execBatchFile(String batFilePath) {
		
		try {
			Process p;
			p = Runtime.getRuntime().exec(batFilePath);
			p.waitFor();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

	}
	
	private String getEpubFileName() {
		
		ebook = ebookFactory.getInstance();
		
		String epubTitle = StringUtils.deleteWhitespace(ebook.getMetaInfo().getTitle());
		
		String epubFileName = epubTitle + ".epub";
		
		return epubFileName;
	}

	/**
	 * default.epub 파일을 책제목.epub 파일로 복사
	 * 
	 * @param srcFile
	 */
	private File copyEpubFile(File srcFile) {

		String epubFileName = getEpubFileName();
			
		String epubFilePath = tempFileSavePath + epubFileName;
		
		File epubFile = new File(epubFilePath);

		try {
			FileUtils.copyFile(srcFile, epubFile);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		srcFile.delete();	// default.epub 파일 삭제
		
		return epubFile;
	}

	@RequestMapping(value = "/book/{bookId}/conversion", method = RequestMethod.POST)
	public String fileConversion()
	{
		ebook = ebookFactory.getInstance();
		
		File inFile = createMDFile(ebook);	// pandoc 입력 md 파일
		File outFile = new File(tempFileSavePath + "default.epub");	// pandoc 출력 epub 파일
		
		File coverFile = new File(tempFileSavePath + "cover.jpg");
		
		// 배치 파일 생성
		File batFile = createBatchFile(inFile, outFile);
		// 배치 파일 실행
		execBatchFile(batFile.getAbsolutePath());

		inFile.delete();	// md 파일 삭제
		batFile.delete();	// 배치 파일 삭제
		coverFile.delete();	// 표지 파일 삭제
		
		File defaultEpubFile = new File(tempFileSavePath + "default.epub");
		
		copyEpubFile(defaultEpubFile);

		return "fileDownload";
	}
	
	@RequestMapping(value = "/book/{bookId}/download", method = RequestMethod.POST)
	public void fileDownload(HttpServletResponse response) throws IOException	{
		
		// default.epub 파일을 책제목.epub 파일로 복사 
		File objFile = new File(tempFileSavePath + getEpubFileName());
		
		// 다운로드할 epub 파일 이름
		String downFileName = URLEncoder.encode(objFile.getName(), "UTF-8");
				
	 	response.setContentType("application/x-msdownload");
		response.setHeader("Content-Disposition", "attachment;filename=" + downFileName);
	 		 	
	 	int nRead = 0;
	    byte btReadByte[] = new byte[(int)objFile.length()];
	    
	    if(objFile.length() > 0 && objFile.isFile()) {
	    	
	        BufferedInputStream objBIS = new BufferedInputStream(new FileInputStream(objFile));
	        BufferedOutputStream objBOS = new BufferedOutputStream(response.getOutputStream());

	        while((nRead = objBIS.read(btReadByte)) != -1)
	            objBOS.write(btReadByte, 0, nRead);
	    
	        objBOS.flush();
	        objBOS.close();
	        objBIS.close();
	    }
	    
	}

}
