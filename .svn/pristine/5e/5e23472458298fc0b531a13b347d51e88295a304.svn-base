package com.formalworks.test.ebook.web.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.formalworks.test.ebook.web.dao.EBook;
import com.formalworks.test.ebook.web.dao.MDFileWriter;
import com.formalworks.test.ebook.web.model.EBookFactory;
import com.formalworks.test.ebook.web.service.MDFileWriterFactory;
import com.formalworks.test.ebook.web.service.TxtFileReaderService;

@Controller
public class FileDownloadController {

	EBook ebook;
	@Autowired
	EBookFactory ebookFactory;
	
	// 임시로 생성되는 중간 파일들의 경로
	private String tempFileSavePath = "D:" + File.separator;
	
	/** 
	 * Markdown 파일 생성
	 * @param ebook
	 * @return
	 */
	private File createMDFile(EBook ebook)
	{
		MDFileWriter writer = MDFileWriterFactory.newInstance();
		try {
			writer.write(ebook);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		// 책 이름으로 생성된 md파일을 pandoc 입력으로 지정하기 위해 영문 이름인 input.md 파일로 복사
		File copiedMDFile = new File(tempFileSavePath + "input.md");
		
		// 생성된 md 파일을 input.md 파일로 복사
		try {
			FileUtils.copyFile(new File(ebook.getOutputMdFilePath()), copiedMDFile);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		new File(ebook.getOutputMdFilePath()).delete();
		
		return copiedMDFile;		
	}
	

	/**
	 * batch 파일 생성
	 * @param pandocInFile
	 * @param pandocOutFile
	 * @return
	 */
	private File createBatchFile(File pandocInFile, File pandocOutFile) {
		
		// batch 파일 명령어
	    String batCommand = "pandoc -f markdown -t epub --toc ";
		batCommand += (pandocInFile.getAbsolutePath() + " -o " + pandocOutFile.getAbsolutePath());
		
		// batch 파일 경로
		String batFilePath = tempFileSavePath + "MDtoEPUB.bat";
		
		try {
			FileUtils.writeStringToFile(new File(batFilePath), batCommand);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return new File(batFilePath);
	}	
	
	/**
	 * batch 파일 실행
	 * @param batFilePath
	 */
	private void execBatchFile(String batFilePath) {
		
		Process p;
		try {
			p = Runtime.getRuntime().exec(batFilePath);
			p.waitFor();
		} catch (IOException e) {
			e.printStackTrace();
		}catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping(value="/conversion")
	public String fileConversion(Model model)
	{
		ebook = ebookFactory.getInstance();
		
		File inFile = createMDFile(ebook);	// pandoc 입력 md 파일
		File outFile = new File(tempFileSavePath + "default.epub");	// pandoc 출력 epub 파일
		
		// 배치 파일 생성
		File batFile = createBatchFile(inFile, outFile);
		// 배치 파일 실행
		execBatchFile(batFile.getAbsolutePath());
		
		inFile.delete();
		batFile.delete();
		
		if(outFile.exists()) {
			model.addAttribute("result", "true");
		}
		else {
			model.addAttribute("result", "false");
		}
		
		return "fileDownload";
	}
	
	@RequestMapping(value= "/download")
	public void fileDownload(HttpServletResponse response) throws IOException	{
		
		File objFile = new File(tempFileSavePath + "default.epub");	// pandoc 출력 epub 파일
		
		String outFileName = objFile.getName();
	 	
		response.setContentType("application/x-msdownload");
	 	response.setHeader("Content-Disposition", "attachment;filename=" + outFileName);
	 	
	 	int nRead = 0;
	    byte btReadByte[] = new byte[(int)objFile.length()];
	    
	    if(objFile.length() > 0 && objFile.isFile()) {
	    	
	        BufferedInputStream objBIS = new BufferedInputStream(new FileInputStream(objFile));
	        BufferedOutputStream objBOS = new BufferedOutputStream(response.getOutputStream());

	        while((nRead = objBIS.read(btReadByte)) != -1)
	            objBOS.write(btReadByte, 0, nRead);
	    
	        objBOS.flush();
	        objBOS.close();
	        objBIS.close();
	    }
	    
	    // 다운로드가 끝난 후 epub 파일 삭제
	    objFile.delete();
	 
	}		
			
}
