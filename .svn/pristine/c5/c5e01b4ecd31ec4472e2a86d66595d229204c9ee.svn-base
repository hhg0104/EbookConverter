package com.formalworks.test.ebook.web.controller;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.formalworks.test.ebook.web.dao.EBook;
import com.formalworks.test.ebook.web.dao.ParagraphDao;
import com.formalworks.test.ebook.web.model.EBookFactory;
import com.formalworks.test.ebook.web.service.MakeFullMDContents;
import com.formalworks.test.ebook.web.service.RecognizingTableOfContents;

@Controller
public class ParagraphController {
	@Autowired
	ParagraphDao paraDaoByOrigin;
	@Autowired
	ParagraphDao paraDaoByPeriod;
	@Autowired
	ParagraphDao paraDaoByIndent;
	@Autowired
	ParagraphDao paraDaoByBlankLine;
	EBook ebook;
	@Autowired
	EBookFactory ebookFactory;
	@Autowired
	MakeFullMDContents fullMD;
	@Autowired
	RecognizingTableOfContents tableContents;
	Map<String, String> previewContents;

	@RequestMapping(value = "/book/{bookId}/option/startLine", method = RequestMethod.GET)
	public String setStartLine(Model model, HttpServletRequest request) {
		ebook = ebookFactory.getInstance();
		List<String> origin = ebook.getOriginalContents();
		StringBuffer sample = new StringBuffer();

		if (origin.size() > 150) {

			for (int i = 0; i <= 150; i++) {
				String line = origin.get(i);
				sample.append(makeCount(i) + line + "\n");
			}
		} else {
			for (int i = 0; i < origin.size(); i++) {
				String line = origin.get(i);
				sample.append(makeCount(i) + line + "\n");
			}
		}
		ebook.setSampleContents(sample.toString());
		model.addAttribute("sample", ebook.getSampleContents());
		model.addAttribute("startLine", ebook.getStartLine());
		return "checkFirstLine";
	}

	private String makeCount(int count) {
		if (count < 10)
			return "00" + (count + "" + ".   ");
		else if (count < 100)
			return "0" + (count + "" + ".   ");
		else
			return count + "" + ".   ";
	}

	@RequestMapping(value = "/book/{bookId}/option/startLine", method = RequestMethod.POST)
	public String setStartLine(@RequestParam("startLine") String startLine, @PathVariable("bookId") String bookId,
			Model model) {
		ebook.setStartLine(Integer.parseInt(startLine));

		tableContents.insertSharpToTableOfContentsNotHaveNumber(ebook);

		model.addAttribute("bookId", decodeString(bookId));

		return "redirect:/book/{bookId}/option/arrangement";
	}

	@RequestMapping(value = "/book/{bookId}/option/arrangement", method = RequestMethod.GET)
	public String setArrangementOption(Model model) {
		previewContents = new HashMap<String, String>();
		makePreviewContents(previewContents, ebook.getStartLine(), ebook.getOriginalContents());
		model.addAttribute("previewContents", previewContents);

		return "paragraph";
	}

	@RequestMapping(value = "/book/{bookId}/confirmSetting", method = RequestMethod.POST)
	public String finishSetting(@RequestParam("optionsRadios") String option, @PathVariable("bookId") String bookId,
			Model model) {
		int startLine = ebook.getStartLine();

		List<String> originContent = ebook.getOriginalContents();

		optionApply(option, startLine, originContent);

		ebook.setFullMDContents(fullMD.mergeFullMDContents(ebook));
		ebook.setParagraphOption(option);
		model.addAttribute("bookId", decodeString(bookId));

		return "redirect:/book/{bookId}/option/coverImg";
	}

	@RequestMapping(value = "/book/{bookId}/option/coverImg", method = RequestMethod.GET)
	public String setCoverImage() {
		ebook.setCoverImg("none");
		return "setCoverImg";
	}

	@RequestMapping(value = "/book/{bookId}/option/coverImg", method = RequestMethod.POST)
	public String setCoverImage(@RequestParam(value = "imgFile", required = false) MultipartFile file,
			@RequestParam("imgOption") String imgOption, @PathVariable("bookId") String bookId, Model model) {

		ebook = ebookFactory.getInstance();

		String tempFileSavePath = "D:" + File.separator;

		String epubImagePath = tempFileSavePath + "cover.jpg";
		File epubImageFile = new File(epubImagePath);

		if (imgOption.equals("default")) { // 기본 표지 이미지
			File defaultImgFile = new File(tempFileSavePath + "DefaultCover.jpg");
			try {
				FileUtils.copyFile(defaultImgFile, epubImageFile);
			} catch (IOException e) {
				e.printStackTrace();
			}
			ebook.setCoverImg("default");
		}
		else if (imgOption.equals("selection")) { // 표지 이미지 업로드
			try {
				file.transferTo(epubImageFile);
			} catch (IllegalStateException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			ebook.setCoverImg("selection");
		}
		else {
			ebook.setCoverImg("none");
		}

		model.addAttribute("bookId", decodeString(bookId));

		return "redirect:/book/{bookId}/option/confirm";
	}

	@RequestMapping(value = "/book/{bookId}/option/confirm", method = RequestMethod.GET)
	public String confirmOption(Model model) {

		ebook = ebookFactory.getInstance();

		String option = ebook.getParagarphOption();
		String optionName = null;

		if (option.equals("origin")) {
			optionName = "원본 기준";
		} else if (option.equals("indent")) {
			optionName = "들여쓰기 기준";
		} else if (option.equals("period")) {
			optionName = "마침표 기준";
		} else if (option.equals("blank")) {
			optionName = "빈줄 기준";
		}

		model.addAttribute("title", ebook.getMetaInfo().getTitle());
		model.addAttribute("author", ebook.getMetaInfo().getAuthor());
		model.addAttribute("option", optionName);

		return "confirmOption";
	}

	private void optionApply(String option, int startLine, List<String> originContent) {
		if (option.equals("origin")) {
			ebook.setMDContents(paraDaoByOrigin.arrangeParagraph(originContent, startLine));

		} else if (option.equals("indent")) {
			ebook.setMDContents(paraDaoByPeriod.arrangeParagraph(originContent, startLine));

		} else if (option.equals("period")) {
			ebook.setMDContents(paraDaoByIndent.arrangeParagraph(originContent, startLine));

		} else if (option.equals("blank")) {
			ebook.setMDContents(paraDaoByBlankLine.arrangeParagraph(originContent, startLine));

		}
	}

	/*
	 * @RequestMapping(value = "/book/{bookId}/option/arrangement/preview",
	 * method = RequestMethod.GET) public String
	 * arrangeParagraph(@RequestParam("option") String option, Model model) {
	 * 
	 * int startLine = ebook.getStartLine();
	 * 
	 * List<String> originContent = ebook.getOriginalContents();
	 * 
	 * optionApply(option, startLine, originContent);
	 * 
	 * ebook.setFullMDContents(fullMD.mergeFullMDContents(ebook));
	 * ebook.setPreviewContents(listToString(ebook.getFullMDContents()));
	 * model.addAttribute("mdContents", ebook.getPreviewContents());
	 * 
	 * return "preview"; }
	 */

	private void makePreviewContents(Map<String, String> previewContents,
			int startLine, List<String> originContent) {

		ebook.setMDContents(paraDaoByOrigin.arrangeParagraph(originContent, startLine));
		ebook.setFullMDContents(fullMD.mergeFullMDContents(ebook));
		previewContents.put("origin", listToString(ebook.getFullMDContents()));

		ebook.setMDContents(paraDaoByPeriod.arrangeParagraph(originContent, startLine));
		ebook.setFullMDContents(fullMD.mergeFullMDContents(ebook));
		previewContents.put("period", listToString(ebook.getFullMDContents()));

		ebook.setMDContents(paraDaoByIndent.arrangeParagraph(originContent, startLine));
		ebook.setFullMDContents(fullMD.mergeFullMDContents(ebook));
		previewContents.put("indent", listToString(ebook.getFullMDContents()));

		ebook.setMDContents(paraDaoByBlankLine.arrangeParagraph(originContent, startLine));
		ebook.setFullMDContents(fullMD.mergeFullMDContents(ebook));
		previewContents.put("blank", listToString(ebook.getFullMDContents()));
	}

	private String listToString(List<String> listContents) {
		StringBuffer contents = new StringBuffer();

		for (int i = 0; i < listContents.size(); i++) {
			String line = listContents.get(i).trim();
			if (!line.isEmpty() && (line.charAt(0) == '#' || line.charAt(0) == '%')) {
				char firstChar = line.charAt(0);
				line = toHTML(line, firstChar);

				if (i < listContents.size() && listContents.get(i + 1).isEmpty())
					contents.append(line);
				else
					contents.append(line + "<br>");
			} else
				contents.append(line + "<br>");
		}
		return contents.toString();
	}

	private String toHTML(String line, char firstChar) {
		line += "</h3>";

		return StringUtils.replace(line, firstChar + "", "<h3>");
	}

	private String decodeString(String str) {

		String decodedString = null;
		try {
			decodedString = new String(str.getBytes("8859_1"), "UTF-8");
		} catch (UnsupportedEncodingException e1) {
			e1.printStackTrace();
		}
		return decodedString;
	}
}
